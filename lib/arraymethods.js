// Generated by CoffeeScript 1.9.1
var any, clump, defineProperty, every, exec, findBy, first, isNumber, last, listCoffeeArrStr, listString, normalize, ref, ref1, sortBy, unique, wrapAt,
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

ref = require('./utils'), every = ref.every, any = ref.any, unique = ref.unique, isNumber = ref.isNumber;

ref1 = require('./listString'), listCoffeeArrStr = ref1.listCoffeeArrStr, listString = ref1.listString;

last = function(me) {
  return me[me.length - 1];
};

first = function(me) {
  return me[0];
};

sortBy = function(me, property) {
  if (every(me, isNumber)) {
    return me.sort(function(a, b) {
      return a[property] - b[property];
    });
  } else {
    return me.sort(function(a, b) {
      return a[property].localeCompare(b[property]);
    });
  }
};

findBy = function(me, properties) {
  var item, k, key, len, match, val;
  if (properties == null) {
    properties = {};
  }
  for (k = 0, len = me.length; k < len; k++) {
    item = me[k];
    match = true;
    for (key in properties) {
      if (!hasProp.call(properties, key)) continue;
      val = properties[key];
      if (!(item[key] !== val)) {
        continue;
      }
      match = false;
      break;
    }
    if (match) {
      return item;
    }
  }
  return null;
};

clump = function(me, n) {
  var i, j, k, ref2, ref3, results;
  if (n == null) {
    n = 2;
  }
  results = [];
  for (j = k = 0, ref2 = me.length, ref3 = n; ref3 > 0 ? k < ref2 : k > ref2; j = k += ref3) {
    results.push((function() {
      var l, ref4, results1;
      results1 = [];
      for (i = l = 0, ref4 = n; 0 <= ref4 ? l < ref4 : l > ref4; i = 0 <= ref4 ? ++l : --l) {
        if ((i + j) < me.length) {
          results1.push(me[i + j]);
        }
      }
      return results1;
    })());
  }
  return results;
};

normalize = function(me) {
  var i, k, l, len, len1, num, results, sum;
  sum = 0;
  for (k = 0, len = me.length; k < len; k++) {
    num = me[k];
    sum += num;
  }
  results = [];
  for (i = l = 0, len1 = me.length; l < len1; i = ++l) {
    num = me[i];
    results.push(me[i] /= sum);
  }
  return results;
};

wrapAt = function(me, index) {
  return me[index % me.length];
};

defineProperty = Object.defineProperty;

if (defineProperty == null) {
  defineProperty = function(object, name, descriptor) {
    if (descriptor.get != null) {
      return object.__defineGetter__(name, descriptor.get);
    } else if (descriptor.value != null) {
      return object[name] = descriptor.value;
    }
  };
}

module.exports = {
  last: last,
  listString: listString,
  listCoffeeArrStr: listCoffeeArrStr,
  sortBy: sortBy,
  findBy: findBy,
  unique: unique,
  clump: clump,
  normalize: normalize,
  any: any,
  wrapAt: wrapAt,
  pollute: function() {
    var fn, name, ref2, results;
    ref2 = module.exports;
    results = [];
    for (name in ref2) {
      if (!hasProp.call(ref2, name)) continue;
      fn = ref2[name];
      if (name !== 'pollute') {
        results.push((function(fn) {
          var descriptor;
          descriptor = {
            enumerable: false,
            value: function() {
              var args;
              args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              return fn.apply(null, [this].concat(args));
            }
          };
          if (Array.prototype[name] == null) {
            return defineProperty(Array.prototype, name, descriptor);
          }
        })(fn));
      }
    }
    return results;
  }
};

if (require.main === module) {
  exec = require('child_process').exec;
  exec('cake build', function(error, stdout, stderr) {
    return console.log({
      error: error,
      stdout: stdout,
      stderr: stderr
    });
  });
  module.exports.pollute();
  console.log([1, 2, 3].listString());
  console.log([1, 2, 3].normalize());
  console.log([1, 2, 3].last());
  console.log(['apple', 'Apple'].unique(function(item) {
    return item.toUpperCase();
  }));
  console.log([
    {
      name: "Fred",
      ID: 1
    }, {
      name: "Joe"
    }
  ].findBy({
    ID: 1
  }));
}
