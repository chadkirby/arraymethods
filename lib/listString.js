// Generated by CoffeeScript 1.7.1
var Articles, any, consolidateAlphaRanges, consolidateRanges, every, exec, isInt, listCoffeeArrStr, listString, unique, _ref;

_ref = require('./utils'), every = _ref.every, any = _ref.any, unique = _ref.unique, isInt = _ref.isInt;

Articles = require('Articles');

listString = function(me, andor, article, comma) {
  var a, andOrProvided, arr, complex, delimiter, isRange, item;
  if (comma == null) {
    comma = ', ';
  }
  isRange = andor == null;
  if (andor == null) {
    andor = 'and';
  }
  andOrProvided = (andor != null ? andor.length : void 0) > 0;
  isRange = every(me, isInt);
  if (isRange) {
    arr = consolidateRanges((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = me.length; _i < _len; _i++) {
        a = me[_i];
        _results.push(parseInt(a));
      }
      return _results;
    })());
  } else {
    isRange = every(me, function(item) {
      return /^[a-z]$/i.test(item);
    });
    if (isRange) {
      arr = consolidateAlphaRanges(me);
    }
  }
  if (me.length > 2) {
    if (isRange) {
      if (arr.length > 2) {
        delimiter = comma;
      }
    } else {
      complex = any(me, function(item) {
        return /,/.test(item);
      });
      delimiter = complex ? '; ' : comma;
    }
  }
  if (delimiter == null) {
    delimiter = andOrProvided ? andor : '';
    if (/^[\w\/]+$/i.test(delimiter)) {
      delimiter = " " + delimiter + " ";
    }
  }
  if (arr == null) {
    arr = me.slice(0);
  }
  if (/^an?$/.test(article)) {
    arr = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        item = arr[_i];
        _results.push(Articles.articlize(item));
      }
      return _results;
    })();
  } else if ((article != null ? article.length : void 0) > 0) {
    arr = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        item = arr[_i];
        _results.push("" + article + " " + item);
      }
      return _results;
    })();
  }
  if (andOrProvided && (arr.length > 2)) {
    arr.push("" + andor + " " + (arr.pop()));
  }
  return arr.join(delimiter);
};

listCoffeeArrStr = function(me) {
  var arr;
  arr = consolidateRanges(me, '..');
  if (arr.length > 1 && any(arr, function(item) {
    return /\d\.\.\d/.test(item);
  })) {
    return "[].concat.call([" + (arr.join('], [')) + "])";
  } else {
    return "[" + (arr.join(', ')) + "]";
  }
};

consolidateRanges = function(inputArray, delimiter) {
  var arr, end, i, num, rangeBegs, rangeEnds, start, _i, _j, _len, _len1, _results;
  if (delimiter == null) {
    delimiter = '–';
  }
  arr = unique(inputArray).sort(function(a, b) {
    return a - b;
  });
  rangeEnds = [];
  rangeBegs = [];
  for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
    num = arr[i];
    if (num !== arr[i - 1] + 1) {
      rangeBegs.push(num);
    }
    if (num !== arr[i + 1] - 1) {
      rangeEnds.push(num);
    }
  }
  _results = [];
  for (i = _j = 0, _len1 = rangeBegs.length; _j < _len1; i = ++_j) {
    start = rangeBegs[i];
    end = rangeEnds[i];
    if (start === end) {
      _results.push(start);
    } else {
      _results.push("" + start + delimiter + end);
    }
  }
  return _results;
};

consolidateAlphaRanges = function(inputArray, delimiter) {
  var arr, end, i, ltr, rangeBegs, rangeEnds, start, _i, _j, _len, _len1, _ref1, _ref2, _results;
  if (delimiter == null) {
    delimiter = '–';
  }
  arr = unique(inputArray).sort();
  rangeEnds = [];
  rangeBegs = [];
  for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
    ltr = arr[i];
    if (ltr.charCodeAt() !== ((_ref1 = arr[i - 1]) != null ? _ref1.charCodeAt() : void 0) + 1) {
      rangeBegs.push(ltr);
    }
    if (ltr.charCodeAt() !== ((_ref2 = arr[i + 1]) != null ? _ref2.charCodeAt() : void 0) - 1) {
      rangeEnds.push(ltr);
    }
  }
  _results = [];
  for (i = _j = 0, _len1 = rangeBegs.length; _j < _len1; i = ++_j) {
    start = rangeBegs[i];
    end = rangeEnds[i];
    if (start === end) {
      _results.push(start);
    } else {
      _results.push("" + start + delimiter + end);
    }
  }
  return _results;
};

module.exports = {
  listString: listString,
  listCoffeeArrStr: listCoffeeArrStr
};

if (require.main === module) {
  exec = require('child_process').exec;
  exec('cake build', function(error, stdout, stderr) {
    return console.log({
      error: error,
      stdout: stdout,
      stderr: stderr
    });
  });
  console.log(listCoffeeArrStr([1, 2, 3, 4]));
  console.log(listCoffeeArrStr([1, 2, 3, 4, 11, 21, 22, 23]));
  console.log(listCoffeeArrStr([1, 3, 5]));
}
